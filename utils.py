import torch
import math

def iou(pred, target):
    width = torch.min(pred[..., 0:1], target[..., 0:1])
    #print(width)
    height = torch.min(pred[..., 1:2], target[..., 1:2])
    #print(height)
    intersection = width * height
    #print(intersection)
    sum1 = pred[..., 0:1] * pred[..., 1:2]
    #print(sum1)
    sum2 = target[..., 0:1] * target[..., 1:2]
    #print(sum2)
    return intersection/(sum1 + sum2 -intersection)

anchor = [
    [[16/640,16/640], [math.sqrt(16*16/2)/640, math.sqrt(2*16*16)/640],  [math.sqrt(16*16*2)/640, math.sqrt(16*16/2)/640],
     [16*2**(1/3)/640, 16*2**(1/3)/640], [math.sqrt(16*2**(1/3)*16*2**(1/3)/2)/640, math.sqrt(16*2**(1/3)*16*2**(1/3)*2)/640], [math.sqrt(16*2**(1/3)*16*2**(1/3)*2)/640, math.sqrt(16*2**(1/3)*16*2**(1/3)/2)/640],
     [16*2**(2/3)/640, 16*2**(2/3)/640], [math.sqrt(16*2**(2/3)*16*2**(2/3)/2)/640, math.sqrt(16*2**(2/3)*16*2**(2/3)*2)/640], [math.sqrt(16*2**(2/3)*16*2**(2/3)*2)/640, math.sqrt(16*2**(2/3)*16*2**(2/3)/2)/640]],
    [[32/640,32/640], [math.sqrt(32*32/2)/640, math.sqrt(2*32*32)/640],  [math.sqrt(32*32*2)/640, math.sqrt(32*32/2)/640],
     [32*2**(1/3)/640, 32*2**(1/3)/640], [math.sqrt(32*2**(1/3)*32*2**(1/3)/2)/640, math.sqrt(32*2**(1/3)*32*2**(1/3)*2)/640], [math.sqrt(32*2**(1/3)*32*2**(1/3)*2)/640, math.sqrt(32*2**(1/3)*32*2**(1/3)/2)/640],
     [32*2**(2/3)/640, 32*2**(2/3)/640], [math.sqrt(32*2**(2/3)*32*2**(2/3)/2)/640, math.sqrt(32*2**(2/3)*32*2**(2/3)*2)/640], [math.sqrt(32*2**(2/3)*32*2**(2/3)*2)/640, math.sqrt(32*2**(2/3)*32*2**(2/3)/2)/640]],
    [[64/640,64/640], [math.sqrt(64*64/2)/640, math.sqrt(2*64*64)/640],  [math.sqrt(64*64*2)/640, math.sqrt(64*64/2)/640],
     [64*2**(1/3)/640, 64*2**(1/3)/640], [math.sqrt(64*2**(1/3)*64*2**(1/3)/2)/640, math.sqrt(64*2**(1/3)*64*2**(1/3)*2)/640], [math.sqrt(64*2**(1/3)*64*2**(1/3)*2)/640, math.sqrt(64*2**(1/3)*64*2**(1/3)/2)/640],
     [64*2**(2/3)/640, 64*2**(2/3)/640], [math.sqrt(64*2**(2/3)*64*2**(2/3)/2)/640, math.sqrt(64*2**(2/3)*64*2**(2/3)*2)/640], [math.sqrt(64*2**(2/3)*64*2**(2/3)*2)/640, math.sqrt(64*2**(2/3)*64*2**(2/3)/2)/640]],
    [[128/640,128/640], [math.sqrt(128*128/2)/640, math.sqrt(2*128*128)/640],  [math.sqrt(128*128*2)/640, math.sqrt(128*128/2)/640],
     [128*2**(1/3)/640, 128*2**(1/3)/640], [math.sqrt(128*2**(1/3)*128*2**(1/3)/2)/640, math.sqrt(128*2**(1/3)*128*2**(1/3)*2)/640], [math.sqrt(128*2**(1/3)*128*2**(1/3)*2)/640, math.sqrt(128*2**(1/3)*128*2**(1/3)/2)/640],
     [128*2**(2/3)/640, 128*2**(2/3)/640], [math.sqrt(128*2**(2/3)*128*2**(2/3)/2)/640, math.sqrt(128*2**(2/3)*128*2**(2/3)*2)/640], [math.sqrt(128*2**(2/3)*128*2**(2/3)*2)/640, math.sqrt(128*2**(2/3)*128*2**(2/3)/2)/640]],
    [[256/640,256/640], [math.sqrt(256*256/2)/640, math.sqrt(2*256*256)/640],  [math.sqrt(256*256*2)/640, math.sqrt(256*256/2)/640],
     [256*2**(1/3)/640, 256*2**(1/3)/640], [math.sqrt(256*2**(1/3)*256*2**(1/3)/2)/640, math.sqrt(256*2**(1/3)*256*2**(1/3)*2)/640], [math.sqrt(256*2**(1/3)*256*2**(1/3)*2)/640, math.sqrt(256*2**(1/3)*256*2**(1/3)/2)/640],
     [256*2**(2/3)/640, 256*2**(2/3)/640], [math.sqrt(256*2**(2/3)*256*2**(2/3)/2)/640, math.sqrt(256*2**(2/3)*256*2**(2/3)*2)/640], [math.sqrt(256*2**(2/3)*256*2**(2/3)*2)/640, math.sqrt(256*2**(2/3)*256*2**(2/3)/2)/640]]
]
#a=torch.tensor([0.4164305949008499, 0.262])
#b=torch.tensor(anchor[0][1])
#print(b)
#print(a[...,1:2])
#print(b[..., 1:2])
#print(torch.min(a[..., 1:2], b[..., 1:2]))
#print(iou(a,torch.tensor(anchor[0][1])))